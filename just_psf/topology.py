import numpy
from numpy.typing import NDArray

from typing import TextIO, List, Optional


class Topology:
    def __init__(
        self,
        symbols: List[str],
        atom_types: List[str],
        charges: Optional[List[float]] = None,
        atom_ids: Optional[List[int]] = None,
        seg_names: Optional[List[str]] = None,
        resi_ids: Optional[List[int]] = None,
        resi_names: Optional[List[str]] = None,
        masses: Optional[List[float]] = None,
        fixed: Optional[List[bool]] = None,
        bonds: Optional[NDArray[int]] = None,
        angles: Optional[NDArray[int]] = None,
        dihedrals: Optional[NDArray[int]] = None,
        impropers: Optional[NDArray[int]] = None,
        donors: Optional[NDArray[int]] = None,
        acceptors: Optional[NDArray[int]] = None
    ):
        assert len(atom_types) == len(symbols)
        assert charges is None or len(charges) == len(symbols)
        assert atom_ids is None or len(atom_ids) == len(symbols)
        assert seg_names is None or len(seg_names) == len(symbols)
        assert resi_ids is None or len(resi_ids) == len(symbols)
        assert resi_names is None or len(resi_names) == len(symbols)
        assert masses is None or len(masses) == len(symbols)
        assert fixed is None or len(fixed) == len(symbols)
        assert bonds is None or bonds.shape[-1] == 2
        assert angles is None or angles.shape[-1] == 3
        assert dihedrals is None or dihedrals.shape[-1] == 4
        assert impropers is None or impropers.shape[-1] == 4
        assert donors is None or donors.shape[-1] == 2
        assert acceptors is None or acceptors.shape[-1] == 2

        self.atom_ids = atom_ids
        self.seg_names = seg_names
        self.resi_ids = resi_ids
        self.resi_names = resi_names
        self.symbols = symbols
        self.atom_types = atom_types
        self.charges = charges
        self.masses = masses
        self.fixed = fixed

        self.bonds = bonds
        self.angles = angles
        self.dihedrals = dihedrals
        self.impropers = impropers
        self.donors = donors
        self.acceptors = acceptors

    def __len__(self) -> int:
        return len(self.symbols)

    @classmethod
    def from_psf(cls, f: TextIO) -> 'Topology':
        """Read topology from a NAMD PSF file"""

        from just_psf.psf_parser import PSFParser
        return PSFParser(f).topology()

    @staticmethod
    def _write_section(f: TextIO, intformat: str, array: numpy.ndarray, title: str, n_per: int):
        if array is None:
            f.write(intformat.format(0) + ' !{}\n\n\n'.format(title))
        else:
            f.write(intformat.format(array.shape[0]) + ' !{}\n'.format(title))
            fmt = ''.join([intformat] * array.shape[1])

            for i in range(array.shape[0]):
                if i != 0 and i % n_per == 0:
                    f.write('\n')

                f.write(fmt.format(*(array[i] + 1)))

            f.write('\n\n')

    def to_psf(self, f: TextIO, flags: Optional[List[str]] = None, title: str = ''):
        """Write a (normally correct) PSF file.
        Handle the `EXT` and `XPLOR` (extended format for atom types) flags.
        Does not report `CHEQ`, but put zeros if any.

        Inspired by <https://parmed.github.io/ParmEd/html/_modules/parmed/formats/psf.html#PSFFile>.
        """

        if flags is None:
            flags = []

        # cheq adds '2G14.6'.
        CHEQ_EXT = '{:>14.6f}{:>14.6f}'.format(0, 0) if 'CHEQ' in flags else ''

        if 'EXT' in flags:
            if 'XPLOR' in flags:
                # fmt02='(I10,1X,A8,1X,A8,1X,A8,1X,A8,1X,A6,1X,2G14.6,I8,2G14.6)'
                atomformat = '{:>10d} {:8} {:8d} {:8} {:8} {:6} {:>14.6f}{:>14.6f}{:8d}' + CHEQ_EXT
            else:
                # fmt01='(I8,1X,A4,1X,A4,1X,A4,1X,A4,1X,I4,1X,2G14.6,I8)'
                atomformat = '{:>10d} {:8} {:8d} {:8} {:8} {:4} {:>14.6f}{:>14.6f}{:8d}' + CHEQ_EXT
            intformat = '{:>10d}'
        else:
            # fmt01='(I8,1X,A4,1X,A4,1X,A4,1X,A4,1X,A4,1X,2G14.6,I8)'
            # XPLOR use 'A4' for atom type, but normal use 'I4', so it is the same!
            atomformat = '{:>8d} {:4} {:4d} {:4} {:4} {:4} {:>14.6f}{:>14.6f}{:8d}' + CHEQ_EXT
            intformat = '{:>8d}'

        f.write('PSF {}\n\n'.format(' '.join(flags)))

        # title
        if title:
            f.write(intformat.format(1 + title.count('\n')) + ' !NTITLE\n')
            f.write(title)
        else:
            f.write(intformat.format(1) + ' !NTITLE\n')
            f.write('* Generated by `pydreiding.topology.Topology.to_psf()`')

        f.write('\n\n')

        # atoms
        f.write(intformat.format(len(self)) + ' !NATOM\n')
        for i in range(len(self)):
            f.write(atomformat.format(
                self.atom_ids[i] if self.atom_ids is not None else i + 1,
                self.seg_names[i] if self.seg_names is not None else 'SYS',
                self.resi_ids[i] if self.resi_ids is not None else 1,
                self.resi_names[i] if self.resi_names is not None else 'X',
                self.symbols[i],
                self.atom_types[i],
                self.charges[i] if self.charges is not None else .0,
                self.masses[i] if self.masses is not None else .0,  # TODO: output actual masses
                self.fixed[i] if self.fixed is not None else False
            ))
            f.write('\n')

        f.write('\n')

        # the rest
        self._write_section(f, intformat, self.bonds, 'NBOND: bonds', 4)
        self._write_section(f, intformat, self.angles, 'NTHETA: angles', 3)
        self._write_section(f, intformat, self.dihedrals, 'NPHI: dihedrals', 2)
        self._write_section(f, intformat, self.impropers, 'NIMPHI: impropers', 2)
        self._write_section(f, intformat, self.donors, 'NDON: donors', 4)
        self._write_section(f, intformat, self.acceptors, 'NACC: acceptors', 4)
